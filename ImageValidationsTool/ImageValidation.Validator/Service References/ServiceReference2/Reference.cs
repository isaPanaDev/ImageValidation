//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImageValidation.Validator.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IImageValidationService")]
    public interface IImageValidationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/ValidateUser", ReplyAction="http://tempuri.org/IImageValidationService/ValidateUserResponse")]
        ImageValidation.Core.Users ValidateUser(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveAccountHistory", ReplyAction="http://tempuri.org/IImageValidationService/SaveAccountHistoryResponse")]
        bool SaveAccountHistory(ImageValidation.Core.Users users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/CheckUsernameExists", ReplyAction="http://tempuri.org/IImageValidationService/CheckUsernameExistsResponse")]
        int CheckUsernameExists(ImageValidation.Core.Users ObjUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveFailedLogon", ReplyAction="http://tempuri.org/IImageValidationService/SaveFailedLogonResponse")]
        bool SaveFailedLogon(ImageValidation.Core.Users ObjUsers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInformation", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInformationResponse")]
        bool SaveComputerInformation(ImageValidation.Core.Computer ObjComp, ImageValidation.Core.Applications[] ObjAppsLst, ImageValidation.Core.HotFix[] ObjDriverLst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInformationFromXml", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInformationFromXmlResponse" +
            "")]
        int SaveComputerInformationFromXml(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/CheckModelRecordExists", ReplyAction="http://tempuri.org/IImageValidationService/CheckModelRecordExistsResponse")]
        bool CheckModelRecordExists(string Model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedModelReco" +
            "rd", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedModelReco" +
            "rdResponse")]
        int SaveComputerInfoUpdateCheckedModelRecord(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedModelReco" +
            "rdSet1", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedModelReco" +
            "rdSet1Response")]
        int SaveComputerInfoUpdateCheckedModelRecordSet1(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/CheckProductRecordExists", ReplyAction="http://tempuri.org/IImageValidationService/CheckProductRecordExistsResponse")]
        bool CheckProductRecordExists(string Model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductRe" +
            "cord", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductRe" +
            "cordResponse")]
        int SaveComputerInfoUpdateCheckedProductRecord(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductRe" +
            "cordSet1", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductRe" +
            "cordSet1Response")]
        int SaveComputerInfoUpdateCheckedProductRecordSet1(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductMo" +
            "delRecord", ReplyAction="http://tempuri.org/IImageValidationService/SaveComputerInfoUpdateCheckedProductMo" +
            "delRecordResponse")]
        int SaveComputerInfoUpdateCheckedProductModelRecord(string xmlData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SeleteComputerInfoByModel", ReplyAction="http://tempuri.org/IImageValidationService/SeleteComputerInfoByModelResponse")]
        int SeleteComputerInfoByModel(string model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SeleteComputerInfoByProduct", ReplyAction="http://tempuri.org/IImageValidationService/SeleteComputerInfoByProductResponse")]
        int SeleteComputerInfoByProduct(string product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SelectApplicationsByComputerID", ReplyAction="http://tempuri.org/IImageValidationService/SelectApplicationsByComputerIDResponse" +
            "")]
        string SelectApplicationsByComputerID(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SelectDriverByComputerID", ReplyAction="http://tempuri.org/IImageValidationService/SelectDriverByComputerIDResponse")]
        string SelectDriverByComputerID(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SelectHotFixByComputerID", ReplyAction="http://tempuri.org/IImageValidationService/SelectHotFixByComputerIDResponse")]
        string SelectHotFixByComputerID(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SelectFileFolderByComputerID", ReplyAction="http://tempuri.org/IImageValidationService/SelectFileFolderByComputerIDResponse")]
        string SelectFileFolderByComputerID(int computerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageValidationService/SelectRegistryByComputerID", ReplyAction="http://tempuri.org/IImageValidationService/SelectRegistryByComputerIDResponse")]
        string SelectRegistryByComputerID(int computerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageValidationServiceChannel : ImageValidation.Validator.ServiceReference2.IImageValidationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageValidationServiceClient : System.ServiceModel.ClientBase<ImageValidation.Validator.ServiceReference2.IImageValidationService>, ImageValidation.Validator.ServiceReference2.IImageValidationService {
        
        public ImageValidationServiceClient() {
        }
        
        public ImageValidationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageValidationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageValidationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageValidationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ImageValidation.Core.Users ValidateUser(string Username, string Password) {
            return base.Channel.ValidateUser(Username, Password);
        }
        
        public bool SaveAccountHistory(ImageValidation.Core.Users users) {
            return base.Channel.SaveAccountHistory(users);
        }
        
        public int CheckUsernameExists(ImageValidation.Core.Users ObjUser) {
            return base.Channel.CheckUsernameExists(ObjUser);
        }
        
        public bool SaveFailedLogon(ImageValidation.Core.Users ObjUsers) {
            return base.Channel.SaveFailedLogon(ObjUsers);
        }
        
        public bool SaveComputerInformation(ImageValidation.Core.Computer ObjComp, ImageValidation.Core.Applications[] ObjAppsLst, ImageValidation.Core.HotFix[] ObjDriverLst) {
            return base.Channel.SaveComputerInformation(ObjComp, ObjAppsLst, ObjDriverLst);
        }
        
        public int SaveComputerInformationFromXml(string xmlData) {
            return base.Channel.SaveComputerInformationFromXml(xmlData);
        }
        
        public bool CheckModelRecordExists(string Model) {
            return base.Channel.CheckModelRecordExists(Model);
        }
        
        public int SaveComputerInfoUpdateCheckedModelRecord(string xmlData) {
            return base.Channel.SaveComputerInfoUpdateCheckedModelRecord(xmlData);
        }
        
        public int SaveComputerInfoUpdateCheckedModelRecordSet1(string xmlData) {
            return base.Channel.SaveComputerInfoUpdateCheckedModelRecordSet1(xmlData);
        }
        
        public bool CheckProductRecordExists(string Model) {
            return base.Channel.CheckProductRecordExists(Model);
        }
        
        public int SaveComputerInfoUpdateCheckedProductRecord(string xmlData) {
            return base.Channel.SaveComputerInfoUpdateCheckedProductRecord(xmlData);
        }
        
        public int SaveComputerInfoUpdateCheckedProductRecordSet1(string xmlData) {
            return base.Channel.SaveComputerInfoUpdateCheckedProductRecordSet1(xmlData);
        }
        
        public int SaveComputerInfoUpdateCheckedProductModelRecord(string xmlData) {
            return base.Channel.SaveComputerInfoUpdateCheckedProductModelRecord(xmlData);
        }
        
        public int SeleteComputerInfoByModel(string model) {
            return base.Channel.SeleteComputerInfoByModel(model);
        }
        
        public int SeleteComputerInfoByProduct(string product) {
            return base.Channel.SeleteComputerInfoByProduct(product);
        }
        
        public string SelectApplicationsByComputerID(int computerId) {
            return base.Channel.SelectApplicationsByComputerID(computerId);
        }
        
        public string SelectDriverByComputerID(int computerId) {
            return base.Channel.SelectDriverByComputerID(computerId);
        }
        
        public string SelectHotFixByComputerID(int computerId) {
            return base.Channel.SelectHotFixByComputerID(computerId);
        }
        
        public string SelectFileFolderByComputerID(int computerId) {
            return base.Channel.SelectFileFolderByComputerID(computerId);
        }
        
        public string SelectRegistryByComputerID(int computerId) {
            return base.Channel.SelectRegistryByComputerID(computerId);
        }
    }
}
